#+title: dtache.el - Dtach Emacs
#+author: Niklas Eklund
#+language: en

* Introduction
  :properties:
  :description: Why Dtache?
  :end:

  =Dtache= allows a program to be seamlessly executed in an environment that is isolated from =Emacs= which made possible by the [[https://github.com/crigler/dtach][dtach]] program. This package makes sure that, even though programs are running in isolated sessions, they get tightly integrated with Emacs.

  The =dtache= package is split up into two, =dtache.el= and =dtache-shell.el=. The former provides the backend implementation, whilst the former provides the integration with =M-x shell=.

** Screenshots

TBD
  
* Configuration
** Use-package examples
*** Dtache

Configuration for the =dtache= package. This package provides the backend for =dtache=.

#+begin_src elisp
  (use-package dtache
    :hook (after-init . dtache-initialize)
    :config
    ;; Configure `dtache'
    (setq dtache-db-directory (no-littering-expand-var-file-name "dtache"))
    (setq dtache-session-directory (expand-file-name "dtache" (temporary-file-directory)))

    ;; Exclude dtache log files from `recentf'
    (add-to-list 'recentf-exclude (rx (regexp "dtache.*\.log"))))
#+end_src

*** Dtache-shell

Configuration for the =dtache-shell= package. This package provides the integration with =M-x shell=.

#+begin_src elisp
  (use-package dtache-shell
    :hook (after-init . dtache-shell-setup)
    :general
    (:keymaps 'dtache-shell-mode-map
              "<S-return>" #'dtache-shell-create-session
              "<C-return>" #'dtache-shell-attach)
    :config
    (setq dtache-shell-history-file "~/.bash_history"))
#+end_src

*** Metadata annotators

Create a custom function that captures the branch name if the session is started in a git repository.

#+begin_src elisp
  (defun dtache--session-git-branch ()
    "Return current git branch."
    (let ((git-directory (locate-dominating-file "." ".git")))
      (when git-directory
        (let ((args '("name-rev" "--name-only" "HEAD")))
          (with-temp-buffer
            (apply #'process-file `("git" nil t nil ,@args))
            (string-trim (buffer-string)))))))
#+end_src

Configure the metadata annotators list so that it runs your annotator.

#+begin_src elisp
  (setq dtache-metadata-annotators-alist '((branch . dtache--session-git-branch))
#+end_src

** Integration with other packages
*** Embark

Add [[https://github.com/oantolin/embark/][embark]] actions to =dtache= session commands.

#+begin_src elisp
  (use-package embark-dtache
    :after (dtache embark))
#+end_src

*** Marginalia

 Add [[https://github.com/minad/marginalia/][marginalia]] annotations to enrich the =dtache= session commands.

#+begin_src elisp
  (use-package marginalia-dtache
    :after (dtache marginalia)
    :config
    (add-to-list 'marginalia-annotators-heavy '(dtache . marginalia-dtache-annotate)))
#+end_src

** Remote support

The =dtache= package supports [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Connection-Local-Variables.html][Connection Local Variables]] which allows the user to change the variables used by =dtache= when running on a remote host.

#+begin_src elisp
  (connection-local-set-profile-variables
   'remote-dtache
   '((dtache-shell . "/bin/bash")
     (dtache-shell-history-file . "~/.bash_history")
     (dtache-session-directory . "~/tmp")
     (dtache-dtach-program . "/home/user/.local/bin/dtach")))

  (connection-local-set-profiles
   '(:application tramp :protocol "ssh") 'remote-dtache)
#+end_src

** Degraded mode

Occasionally the =dtache= user might run into shell commands that don't play well with the package. The symptom is that the logs are not updated until the session finish, which removes a lot of the use-case for dtache. To mitigate the problem dtache can be instructed to run in a degraded mode for those commands. This is done by adding a regexp that matches the troublesome command and add it to the list =dtache-degraded-list=.

#+begin_src elisp
  (setq dtache-degraded-list '("foo"))
#+end_src

In degraded mode =dtache= will skip the usage of =tee= and instead redirect all the outputs to the dtache log. Use =dtache-tail-log= to tail the output from the session. It's still possible to attach in the terminal but there is no output forwarded to it.

** Notification

Make =dtache= send a notification once a session is finished. This would only make sense to add for sessions on the localhost. Add the following advice to the config.

#+begin_src elisp
  (defun dtache-session-finish-notification-a (session)
    "Send a notification when SESSION finish."
    (let* ((min-duration 5.0)
           (send-alert (> (dtache--session-duration session) min-duration)))
      (if send-alert
          (alert (format "Command: %s" (dtache--session-command session))
                 :title (format "Dtache session finished!")
                 :severity 'moderate
                 :category 'compile
                 :id 'compile-ok)
        (message "Dtache finished session: %s"
                 (dtache--session-command session)))))
#+end_src

#+begin_src elisp
  (advice-add 'dtache-session-finish-notification :override #'dtache-session-finish-notification-a)
#+end_src

** Evil bindings

#+begin_src elisp
  (general-def '(normal motion) dtache-sessions-mode-map
    "<return>" #'dtache-open-session
    "e" #'dtache-open-stderr
    "c" #'dtache-compile-session
    "d" #'dtache-remove-session
    "gr" #'dtache-list-sessions
    "K" #'dtache-kill-session
    "L" #'dtache-open-log
    "o" #'dtache-open-stdout
    "r" #'dtache-rerun-session
    "t" #'dtache-tail-log
    "w" #'dtache-copy-session-command
    "W" #'dtache-copy-session-log)
  (general-def '(motion normal) dtache-log-mode-map
    "q" #'kill-buffer-and-window)
  (general-def '(motion normal) dtache-tail-mode-map
    "q" #'dtache-quit-tail-log)
#+end_src

* Commands

The following is a list of commands that can be run on =dtache= sessions.

** Dtache-shell

Commands to be used in shell buffers.

| Command                 | Description                 |
|-------------------------+-----------------------------|
| dtache-shell-create     | Create a session            |
| dtache-shell-attach     | Attach to a session         |
| dtache-shell-detach     | Detach from a session       |

** Dtache

General commands that can be used anywhere.

| Command                     | Description                                 |
|-----------------------------+---------------------------------------------|
| dtache-open-log             | Open the output log for a session           |
| dtache-open-stdout          | Open the stdout for a session               |
| dtache-open-stderr          | Open the stderr for a session               |
| dtache-copy-session-command | Copy the session command                    |
| dtache-copy-session-log     | Copy the log output of a session            |
| dtache-kill-session         | Kill a session                              |
| dtache-remove-session       | Remove a session                            |
| dtache-compile-session      | Open the session output in compilation mode |

* Tips & Tricks
** Advice functions

The following two functions are examples on how to create functions that can be used to advice other functions in order to replace =compile= and =async-shell-command= with =dtache-start-session=

#+begin_src elisp
  (defun dtache-compile-advice (orig-fun &rest args)
    "Function to replace usage of `compile' before calling ORIG-FUN with ARGS."
    (cl-letf (((symbol-function 'compile)
               (lambda (args)
                 (dtache-start-session (car args)))))
      (apply orig-fun args)))

  (defun dtache-start-session-advice (orig-fun &rest args)
    "Function to replace usage of `async-shell-command' before calling ORIG-FUN with ARGS."
    (cl-letf (((symbol-function 'async-shell-command)
               (lambda (args)
                 (dtache-start-session (car args)))))
      (apply orig-fun args)))
#+end_src

* Credits

The inspiration for the package comes from ~ambrevar's~ [[https://github.com/Ambrevar/dotfiles/blob/master/.emacs.d/lisp/package-eshell-detach.el][package-eshell-detach]].

* TODO Things to do before next release
- [X] Update header documentation in files
- [ ] Squash the development from the branch and merge to master
- [ ] Update the README.org file
